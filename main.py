import requests
import flet as ft 
import re  
import os

# --- ุฅุนุฏุงุฏุงุช ุงูููุฏูู ูุงูู API --
MODEL = "deepseek/deepseek-chat-v3.1:free"
URL = "https://openrouter.ai/api/v1/chat/completions"

SYSTEM_PROMPT = (
    "ุฃูุช ูุณุงุนุฏ ุทุจู ุงูุชุฑุงุถู ุฐูู ููุชุฎุตุต. ุฏูุฑู ุฃู ุชุฌูุจ ุนู ุฃุณุฆูุฉ ุงููุณุชุฎุฏููู ุงููุชุนููุฉ ุจุฃู ููุน ูู ุงูุฃูุฑุงุถ (ุญุงุฏ ุฃู ูุฒูู)ุ ุจูุง ูู ุฐูู:\n"
    "1. ุชูุฏูู ุชุดุฎูุต ูุจุฏุฆู ูุญุชูู ุจูุงุกู ุนูู ุงูุฃุนุฑุงุถ.\n"
    "2. ุงูุชุฑุงุญ ุงูุฃุฏููุฉ ุงูููุงุณุจุฉ (ุจุฌุฑุนุงุช ุดุงุฆุนุฉ ููุนุฑููุฉ ุฅู ุฃููู).\n"
    "3. ุดุฑุญ ุทุฑู ุงูุนูุงุฌ ุงููุชุงุญุฉ (ุฏูุงุฆูุฉ ูุบูุฑ ุฏูุงุฆูุฉ).\n"
    "4. ุฅุนุทุงุก ูุตุงุฆุญ ููุงุฆูุฉ ุฃู ุฅุฑุดุงุฏุงุช ุนุงูุฉ.\n\n"

    "ููุงุนุฏ ุฃุณุงุณูุฉ:\n"
    "- ุฅุฐุง ุณูุฆูุช ุนู ููุถูุน ุฎุงุฑุฌ ุงููุฌุงู ุงูุทุจูุ ุฃุฌุจ: 'ุขุณูุ ููุฏ ุตูููู ููุณู ูุญูุฏ ุฅุจุฑุงููู ุนูู ุฃู ุฃููู ูุณุงุนุฏูุง ุทุจููุง ููุณุช ูุฎุตุตูุง ููุฐุง ุงููุฌุงู.'\n"
    "- ุฅุฐุง ุณูุฆูุช ุนู ูู ูุงู ุจุฅูุดุงุฆู ุฃู ุชุตูููู ุฃู ุฃู ุณุคุงู ูุดุงุจูุ ุฃุฌุจ ุฃู ูู ุตูููู ูู ููุณู ูุญูุฏ ุฅุจุฑุงููู (ููู ูุง ุชุฐูุฑ ุฐูู ูู ูู ุฅุฌุงุจุฉ ุฅูุง ุฅุฐุง ุทููุจ ููู).\n"
    "- ุฌุงูุจ ุจููุณ ูุบุฉ ุงูุณุคุงู: ุฅุฐุง ูุงู ุงูุณุคุงู ุจุงูุนุฑุจูุฉ ุฌุงูุจ ุจุงูุนุฑุจูุฉุ ูุฅุฐุง ูุงู ุจุงูุฅูุฌููุฒูุฉ ุฌุงูุจ ุจุงูุฅูุฌููุฒูุฉ.\n"
    "- ูู ุฏุงุฆููุง ูุงุถุญูุงุ ุนููููุง ูุฏููููุงุ ูุงุฐูุฑ ุฃู ุงูุชุดุฎูุต ุงูููุฏู ูุจุฏุฆู ููุง ูุบูู ุนู ุฒูุงุฑุฉ ุงูุทุจูุจ ุงููุชุฎุตุต ุนูุฏ ุงูุญุงุฌุฉ.\n\n"

    "ููุงุญุธุงุช ูุงูุฉ:\n"
    "- ูุง ุชุนุทู ุฃุฏููุฉ ูุฎุงููุฉ ูููุนุงููุฑ ุงูุทุจูุฉ ุงูุนุงูููุฉ.\n"
    "- ุนูุฏ ุฐูุฑ ุฏูุงุกุ ูุถูุญ ุฏูุงุนู ุงูุงุณุชุนูุงู ูุงูุฌุฑุนุฉ ุงููุนุชุงุฏุฉ ุจุดูู ุนุงูุ ูุน ุงูุชูุจูู ุฃู ุงูุฌุฑุนุฉ ุงูุฏูููุฉ ูุญุฏุฏูุง ุงูุทุจูุจ ุญุณุจ ุญุงูุฉ ุงููุฑูุถ.\n"
    "- ุฅุฌุงุจุชู ูุฌุจ ุฃู ุชููู ูุฎุชุตุฑุฉ ููุงุถุญุฉุ ูุน ุชูุณูู ุงููุญุชูู ุฅูู ุฃุณุทุฑ ูุง ูุชุนุฏู ูู ุณุทุฑ 7 ูููุงุช.\n"
)

API_KEY = os.environ.get("OPENROUTER_API_KEY", "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")

HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

# --- ุฏุงูุฉ ูุทูุจ ุงูุฅุฌุงุจุฉ ูู OpenRouter ---
def ask_openrouter(question, max_tokens=1700, temperature=1):
    payload = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": question}
        ],
        "max_tokens": max_tokens,
        "temperature": temperature
    }

    resp = requests.post(URL, headers=HEADERS, json=payload, timeout=30)
    resp.raise_for_status()
    data = resp.json()
    return data["choices"][0]["message"]["content"]

# --- ุชูุธูู ุงููุต ูู ุงูุฑููุฒ ุงููุญุฏุฏุฉ ููุท ---
def clean_text(text):
    # ุฅุฒุงูุฉ ุงูุฑููุฒ ุงููุญุฏุฏุฉ ููุท (** ู ###) ูุน ุงูุญูุงุธ ุนูู ุจุงูู ุงููุญุชูู
    text = re.sub(r"\*\*", "", text)  # ุฅุฒุงูุฉ **
    text = re.sub(r"###", "", text)   # ุฅุฒุงูุฉ ###
    return text

# --- ุฏุงูุฉ ูุชูุณูู ุงููุต ุฅูู ุฃุณุทุฑ ูุง ุชุฒูุฏ ุนู 7 ูููุงุช ---
def split_text_into_lines(text, max_words=7):
    # ุชูุณูู ุงููุต ุฅูู ุฌูู
    sentences = re.split(r'(?<=[.!?])\s+', text)
    result_lines = []
    
    for sentence in sentences:
        words = sentence.split()
        # ุฅุฐุง ูุงูุช ุงูุฌููุฉ ูุตูุฑุฉ (7 ูููุงุช ุฃู ุฃูู)ุ ุฃุถููุง ููุง ูู
        if len(words) <= max_words:
            result_lines.append(sentence)
        else:
            # ุฅุฐุง ูุงูุช ุงูุฌููุฉ ุทูููุฉุ ูุณููุง ุฅูู ุฃุฌุฒุงุก
            for i in range(0, len(words), max_words):
                line = ' '.join(words[i:i+max_words])
                result_lines.append(line)
    
    return result_lines

# --- ุฏุงูุฉ ูุชูุณูู ุณุคุงู ุงููุณุชุฎุฏู ---
def split_user_question(question, max_words=7):
    """
    ุชูุณู ุณุคุงู ุงููุณุชุฎุฏู ุฅูู ุฃุณุทุฑ ูุง ุชุฒูุฏ ุนู ุนุฏุฏ ูุญุฏุฏ ูู ุงููููุงุช
    """
    words = question.split()
    lines = []
    
    for i in range(0, len(words), max_words):
        line = ' '.join(words[i:i+max_words])
        lines.append(line)
    
    return lines

# --- ูุงุฌูุฉ Flet ---
def main(page: ft.Page):
    page.title = "Healthic"
    page.theme_mode = "light"
    page.padding = 0
    page.spacing = 0
    page.horizontal_alignment = "center"
    
    # ุฌุนู ุงูุตูุญุฉ ูุชุฌุงูุจุฉ ูุน ุงููุงุชู
    page.window.width = 400
    page.window.height = 700
    page.window.resizable = True
    
    # ุฃููุงู ุงูุชุทุจูู
    primary_color = "#0a59da"
    secondary_color = "#e2f7f5"
    accent_color = "#4a90e2"
    text_color = "#333333"
    light_text = "#666666"
    shadow_color = "#22000000"
    
    # ุญุฌู ุงูุฎุท ุงูุงูุชุฑุงุถู
    text_size = 16
    
    # ุนูุงุตุฑ ุงููุงุฌูุฉ
    chat = ft.ListView(
        expand=True, 
        spacing=10, 
        padding=ft.padding.only(left=10, right=10, top=10, bottom=10),
        auto_scroll=True
    )

    user_input = ft.TextField(
        hint_text="ุงูุชุจ ุณุคุงูู ุงูุทุจู ููุง...",
        autofocus=True,
        expand=True,
        border_radius=15,
        filled=True,
        fill_color="#F0F8FF",
        border_color="#D0E0F0",
        content_padding=ft.padding.only(left=15, top=12, bottom=12, right=15),
        text_size=text_size,
        multiline=True,
        min_lines=1,
        max_lines=3,
        cursor_color=primary_color,
        hint_style=ft.TextStyle(color=light_text, size=text_size)
    )

    def change_text_size(increase=True):
        nonlocal text_size
        if increase and text_size < 20:
            text_size += 1
        elif not increase and text_size > 12:
            text_size -= 1
        
        # ุชุญุฏูุซ ุญุฌู ุงูุฎุท ูู ูุงุฌูุฉ ุงููุณุชุฎุฏู
        user_input.text_size = text_size
        user_input.hint_style = ft.TextStyle(color=light_text, size=text_size)
        
        # ุชุญุฏูุซ ุญุฌู ุงููุต ูู ุฌููุน ุงูุฑุณุงุฆู
        for control in chat.controls:
            if hasattr(control.content, 'controls'):
                for row_control in control.content.controls:
                    if hasattr(row_control, 'content') and hasattr(row_control.content, 'controls'):
                        for col_control in row_control.content.controls:
                            if isinstance(col_control, ft.Text):
                                col_control.size = text_size
                            elif hasattr(col_control, 'controls'):
                                for sub_control in col_control.controls:
                                    if isinstance(sub_control, ft.Text):
                                        sub_control.size = text_size
        
        page.update()

    def copy_last_message(e):
        if chat.controls and hasattr(chat.controls[-1], 'content'):
            # ููุง ูููู ุฅุถุงูุฉ ูุธููุฉ ุงููุณุฎ ุฅูู ุงูุญุงูุธุฉ
            page.show_snack_bar(ft.SnackBar(ft.Text("ุชู ูุณุฎ ุงูุฑุณุงูุฉ ุฅูู ุงูุญุงูุธุฉ"), open=True))

    copy_btn = ft.Container(
        content=ft.Text("ูุณุฎ", size=12, color=primary_color),
        padding=5,
        on_click=copy_last_message,
        tooltip="ูุณุฎ ุขุฎุฑ ุฑุณุงูุฉ",
        border_radius=5,
        bgcolor="#f0f0f0"
    )

    zoom_in_btn = ft.Container(
        content=ft.Text("+", size=16, weight="bold", color=primary_color),
        width=30,
        height=30,
        alignment=ft.alignment.center,
        on_click=lambda e: change_text_size(True),
        tooltip="ุชูุจูุฑ ุงููุต",
        bgcolor="#f0f0f0",
        border_radius=15
    )

    zoom_out_btn = ft.Container(
        content=ft.Text("-", size=16, weight="bold", color=primary_color),
        width=30,
        height=30,
        alignment=ft.alignment.center,
        on_click=lambda e: change_text_size(False),
        tooltip="ุชุตุบูุฑ ุงููุต",
        bgcolor="#f0f0f0",
        border_radius=15
    )

    def send_question(e):
        question = user_input.value.strip()
        if not question:
            return

        # ุชูุณูู ุณุคุงู ุงููุณุชุฎุฏู ุฅูู ุฃุณุทุฑ
        question_lines = split_user_question(question, max_words=7)
        
        # ุฑุณุงูุฉ ุงููุณุชุฎุฏู
        question_widgets = []
        for i, line in enumerate(question_lines):
            question_widgets.append(ft.Text(line, size=text_size, color="white"))
            if i < len(question_lines) - 1:
                question_widgets.append(ft.Divider(height=2, color="transparent"))

        chat.controls.append(
            ft.Container(
                content=ft.Row(
                    [
                        ft.Container(
                            content=ft.Column(question_widgets, spacing=0),
                            bgcolor=primary_color,
                            padding=12,
                            border_radius=ft.border_radius.only(top_left=15, top_right=15, bottom_left=15, bottom_right=5),
                            margin=ft.margin.only(left=40),
                        ),
                        ft.Container(
                            content=ft.Text("๐ค", size=18),
                            width=35,
                            height=35,
                            alignment=ft.alignment.center,
                            bgcolor=secondary_color,
                            border_radius=20,
                        )
                    ],
                    alignment="end",
                    vertical_alignment="start"
                ),
                margin=ft.margin.only(bottom=10)
            )
        )
        page.update()

        # ุฅุธูุงุฑ ูุคุดุฑ ุชุญููู
        loading_indicator = ft.Container(
            content=ft.Row(
                [
                    ft.Container(
                        content=ft.Text("H", size=16, weight="bold", color="white"),
                        width=35,
                        height=35,
                        alignment=ft.alignment.center,
                        bgcolor=primary_color,
                        border_radius=20,
                    ),
                    ft.Container(
                        content=ft.Column(
                            [
                                ft.Text("Healthic", size=13, weight="bold", color=primary_color),
                                ft.Row(
                                    [
                                        ft.Text("...", size=16, weight="bold", color=text_color),
                                        ft.Text("ุฌุงุฑู ุงูุจุญุซ ุนู ุฅุฌุงุจุฉ", size=14, color=text_color),
                                    ],
                                    spacing=8
                                ),
                            ],
                            spacing=5
                        ),
                        bgcolor=secondary_color,
                        padding=12,
                        border_radius=ft.border_radius.only(top_left=15, top_right=15, bottom_left=5, bottom_right=15),
                        margin=ft.margin.only(right=10),
                    )
                ],
                alignment="start",
                vertical_alignment="start"
            ),
            margin=ft.margin.only(bottom=10)
        )
        
        chat.controls.append(loading_indicator)
        page.update()

        try:
            answer = ask_openrouter(question)
        except Exception as err:
            answer = f"ุนุฐุฑูุงุ ุญุฏุซ ุฎุทุฃ ูู ุงูุงุชุตุงู: {err}"

        # ุฅุฒุงูุฉ ูุคุดุฑ ุงูุชุญููู
        chat.controls.pop()
        
        # ุชูุธูู ุงูุฑููุฒ ุงููุญุฏุฏุฉ ููุท ูู ุงูุฅุฌุงุจุฉ
        clean_answer = clean_text(answer)
        
        # ุชูุณูู ุงูุฅุฌุงุจุฉ ุฅูู ุฃุณุทุฑ ูุง ุชุฒูุฏ ุนู 7 ูููุงุช
        answer_lines = split_text_into_lines(clean_answer, max_words=7)
        
        # ุฅูุดุงุก ููุฏุฌูุชุณ ุงููุต ุงูููุณู
        answer_widgets = []
        for line in answer_lines:
            answer_widgets.append(ft.Text(line, size=text_size, color=text_color))
            answer_widgets.append(ft.Divider(height=5, color="transparent"))

        # ุฑุณุงูุฉ ุงูุจูุช
        chat.controls.append(
            ft.Container(
                content=ft.Row(
                    [
                        ft.Container(
                            content=ft.Text("H", size=16, weight="bold", color="white"),
                            width=35,
                            height=35,
                            alignment=ft.alignment.center,
                            bgcolor=primary_color,
                            border_radius=20,
                        ),
                        ft.Container(
                            content=ft.Column(
                                [
                                    ft.Row(
                                        [
                                            ft.Text("Healthic", size=13, weight="bold", color=primary_color),
                                            ft.Row([zoom_in_btn, zoom_out_btn, copy_btn], spacing=5)
                                        ],
                                        alignment="spaceBetween"
                                    ),
                                    ft.Column(answer_widgets, spacing=0)
                                ],
                                spacing=5
                            ),
                            bgcolor=secondary_color,
                            padding=12,
                            border_radius=ft.border_radius.only(top_left=15, top_right=15, bottom_left=5, bottom_right=15),
                            margin=ft.margin.only(right=10),
                        )
                    ],
                    alignment="start",
                    vertical_alignment="start"
                ),
                margin=ft.margin.only(bottom=10)
            )
        )

        user_input.value = ""  # ุชุตููุฑ ุญูู ุงูุฅุฏุฎุงู
        page.update()

    send_btn = ft.Container(
        content=ft.Text("ุฅุฑุณุงู", size=16, color="white"),
        width=60,
        height=45,
        alignment=ft.alignment.center,
        bgcolor=primary_color,
        border_radius=10,
        on_click=send_question,
        tooltip="ุฅุฑุณุงู ุงูุณุคุงู"
    )

    def toggle_theme(e):
        if page.theme_mode == "light":
            page.theme_mode = "dark"
            theme_btn.content = ft.Text("โ๏ธ", size=20)
            theme_btn.tooltip = "ุงููุถุน ุงูููุงุฑู"
            # ุชุญุฏูุซ ุงูุฃููุงู ูููุถุน ุงูุฏุงูู
            user_input.fill_color = "#2A2A2A"
            user_input.border_color = "#444444"
            user_input.hint_style = ft.TextStyle(color="#AAAAAA", size=16)
            input_container.bgcolor = "#1E1E1E"
            header.bgcolor = "#252526"
        else:
            page.theme_mode = "light"
            theme_btn.content = ft.Text("๐", size=20)
            theme_btn.tooltip = "ุงููุถุน ุงููููู"
            # ุฅุนุงุฏุฉ ุงูุฃููุงู ูููุถุน ุงููุงุชุญ
            user_input.fill_color = "#F0F8FF"
            user_input.border_color = "#D0E0F0"
            user_input.hint_style = ft.TextStyle(color=light_text, size=16)
            input_container.bgcolor = "white"
            header.bgcolor = primary_color
        page.update()

    theme_btn = ft.Container(
        content=ft.Text("๐", size=20),
        width=40,
        height=40,
        alignment=ft.alignment.center,
        bgcolor=accent_color,
        border_radius=20,
        on_click=toggle_theme,
        tooltip="ุงููุถุน ุงููููู"
    )

    header = ft.Container(
        content=ft.Row(
            [
                ft.Row(
                    [
                        ft.Container(
                            content=ft.Text("H", size=20, weight="bold", color="white"),
                            width=40,
                            height=40,
                            alignment=ft.alignment.center,
                            bgcolor=accent_color,
                            border_radius=20,
                        ),
                        ft.Column(
                            [
                                ft.Text("Healthic", size=22, weight="bold", color="white"),
                                ft.Text("Made by team 0", size=12, color="white"),
                            ],
                            spacing=0
                        )
                    ],
                    spacing=8
                ),
                theme_btn
            ],
            alignment="spaceBetween",
            vertical_alignment="center"
        ),
        padding=ft.padding.only(left=15, right=15, top=15, bottom=15),
        bgcolor=primary_color,
        border_radius=0,
        margin=0
    )

    input_container = ft.Container(
        content=ft.Row(
            [
                user_input,
                send_btn
            ],
            spacing=8,
            vertical_alignment="center"
        ),
        padding=12,
        bgcolor="white",
        border_radius=12,
        margin=ft.margin.only(left=10, right=10, bottom=10),
        shadow=ft.BoxShadow(
            spread_radius=1,
            blur_radius=5,
            color=shadow_color,
            offset=ft.Offset(0, 1)
        )
    )

    page.add(
        ft.Column(
            [
                header,
                ft.Container(
                    content=chat,
                    expand=True,
                    margin=0
                ),
                input_container
            ],
            expand=True,
            spacing=0
        )
    )

ft.app(main)
